#pragma checksum "D:\CS SOFT SOL\EmployeeManagement_TAsk1\EmployeeManagement_TAsk1\Views\Employee\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "6dfe2df25598756269947dec7716aa10acce9f0f"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Employee_Index), @"mvc.1.0.view", @"/Views/Employee/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\CS SOFT SOL\EmployeeManagement_TAsk1\EmployeeManagement_TAsk1\Views\_ViewImports.cshtml"
using EmployeeManagement_TAsk1;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\CS SOFT SOL\EmployeeManagement_TAsk1\EmployeeManagement_TAsk1\Views\_ViewImports.cshtml"
using EmployeeManagement_TAsk1.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"6dfe2df25598756269947dec7716aa10acce9f0f", @"/Views/Employee/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"ef22bcbd0ac7a13e9a9eff7f8f5ac20b4d5530d0", @"/Views/_ViewImports.cshtml")]
    public class Views_Employee_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<IEnumerable<Employee>>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 3 "D:\CS SOFT SOL\EmployeeManagement_TAsk1\EmployeeManagement_TAsk1\Views\Employee\Index.cshtml"
  
    ViewData["Title"] = "Employee List";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<h2 class=\"text-primary text-center\">Employee List</h2>\r\n\r\n<p>\r\n    ");
#nullable restore
#line 10 "D:\CS SOFT SOL\EmployeeManagement_TAsk1\EmployeeManagement_TAsk1\Views\Employee\Index.cshtml"
Write(Html.ActionLink("Create New", "Create"));

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
    <button id=""exportToExcel"" class=""btn btn-primary"">Export Selected to Excel</button>
    <button id=""exportToCSV"" class=""btn btn-primary"">Export Selected to CSV</button>
    <input type=""checkbox"" id=""selectAllCheckbox""> Select All
</p>

<table id=""employeeTable"" class=""table table-bordered table-striped table-responsive"">
</table>

");
            DefineSection("scripts", async() => {
                WriteLiteral(@"
    <link rel=""stylesheet"" href=""https://cdn.datatables.net/1.11.3/css/jquery.dataTables.min.css"">
    <script src=""https://code.jquery.com/jquery-3.6.0.min.js""></script>
    <script src=""https://cdn.datatables.net/1.11.3/js/jquery.dataTables.min.js""></script>
    <script src=""https://cdn.jsdelivr.net/npm/sweetalert2@10""></script>
    <script>
        $(document).ready(function () {
            var dataSet = ");
#nullable restore
#line 26 "D:\CS SOFT SOL\EmployeeManagement_TAsk1\EmployeeManagement_TAsk1\Views\Employee\Index.cshtml"
                     Write(Html.Raw(Json.Serialize(Model)));

#line default
#line hidden
#nullable disable
                WriteLiteral(@";

            var employeeTable = $('#employeeTable').DataTable({
                data: dataSet,
                columns: [
                    {
                        title: '',
                        data: null,
                        orderable: false,
                        className: 'select-checkbox',
                        render: function (data, type, row) {
                            return '<input type=""checkbox"" class=""employeeCheckbox"" value=""' + row.id + '"">';
                        }
                    },
                    { title: 'First Name', data: 'firstName' },
                    { title: 'Last Name', data: 'lastName' },
                    { title: 'Email', data: 'email' },
                    { title: 'Mobile', data: 'mobile' },
                    { title: 'Address', data: 'address' },
                    {
                        title: 'Actions',
                        data: null,
                        render: function (data, type, row) {
         ");
                WriteLiteral(@"                   return '<a href=""/Employee/Update/' + row.id + '"">Update</a> | ' +
                                '<a href=""/Employee/Delete/' + row.id + '"">Delete</a>';
                        }
                    }
                ],
                select: {
                    style: 'multi'
                },
                order: [[1, 'asc']],
                pageLength: 10,
                searching: true,
                columnDefs: [
                    { targets: [1, 2, 3], searchable: true },
                    { targets: [4, 5], searchable: false, orderable: true },
                    { targets: '_all', orderable: false },
                    { targets: [4, 5], orderable: true }
                ]
            });

            $('#selectAllCheckbox').on('change', function () {
                var isChecked = $(this).prop('checked');
                $('.employeeCheckbox').prop('checked', isChecked);
            });

            $('#exportToExcel').on('click', function ");
                WriteLiteral(@"() {
                var selectedEmployees = [];
                $('.employeeCheckbox:checked').each(function () {
                    selectedEmployees.push($(this).val());
                });

                if (selectedEmployees.length > 0) {
                    var url = '");
#nullable restore
#line 80 "D:\CS SOFT SOL\EmployeeManagement_TAsk1\EmployeeManagement_TAsk1\Views\Employee\Index.cshtml"
                          Write(Url.Action("ExportToExcel", "Employee"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
                    var form = $('<form action=""' + url + '"" method=""POST"" enctype=""multipart/form-data""></form>');

                    for (var i = 0; i < selectedEmployees.length; i++) {
                        form.append('<input type=""hidden"" name=""selectedEmployees"" value=""' + selectedEmployees[i] + '"">');
                    }

                    $('body').append(form);
                    form.submit();
                } else {
                                        Swal.fire({
                        icon: 'error',
                        title: 'No employees selected!',
                        text: 'Please select at least one employee to export.',
                    });
                }
            });

            $('#exportToCSV').on('click', function () {
                var selectedEmployees = [];
                $('.employeeCheckbox:checked').each(function () {
                    selectedEmployees.push($(this).val());
                });

                if (sel");
                WriteLiteral("ectedEmployees.length > 0) {\r\n                    var url = \'");
#nullable restore
#line 105 "D:\CS SOFT SOL\EmployeeManagement_TAsk1\EmployeeManagement_TAsk1\Views\Employee\Index.cshtml"
                          Write(Url.Action("ExportToCSV", "Employee"));

#line default
#line hidden
#nullable disable
                WriteLiteral(@"';
                    var form = $('<form action=""' + url + '"" method=""POST"" enctype=""multipart/form-data""></form>');

                    for (var i = 0; i < selectedEmployees.length; i++) {
                        form.append('<input type=""hidden"" name=""selectedEmployees"" value=""' + selectedEmployees[i] + '"">');
                    }

                    $('body').append(form);
                    form.submit();
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'No employees selected!',
                        text: 'Please select at least one employee to export.',
                    });
                }
            });
        });
    </script>
");
            }
            );
            WriteLiteral("\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<IEnumerable<Employee>> Html { get; private set; }
    }
}
#pragma warning restore 1591
